(setq user-full-name "Junichi Motohisa")
(setq user-mail-address "motohisa@ist.hokudai.ac.jp")

;; taken from http://d.hatena.ne.jp/tomoya/20090807/1249601308
(defun x->bool (elt) (not (not elt)))

;; emacs-version predicates
(setq emacs23-p (string-match "^23" emacs-version)
	  emacs24-p (string-match "^24" emacs-version)
	  emacs24.3-p (string-match "^23\.3" emacs-version)
	  emacs24.4-p (string-match "^23\.4" emacs-version)
	  emacs24.5-p (string-match "^23\.5" emacs-version))

;; system-type predicates
(setq darwin-p  (eq system-type 'darwin)
      ns-p      (eq window-system 'ns)
      carbon-p  (eq window-system 'mac)
      linux-p   (eq system-type 'gnu/linux)
      colinux-p (when linux-p
                  (let ((file "/proc/modules"))
                    (and
                     (file-readable-p file)
                     (x->bool
                      (with-temp-buffer
                        (insert-file-contents file)
                        (goto-char (point-min))
                        (re-search-forward "^cofuse\.+" nil t))))))
      cygwin-p  (eq system-type 'cygwin)
      nt-p      (eq system-type 'windows-nt)
      meadow-p  (featurep 'meadow)
      windows-p (or cygwin-p nt-p meadow-p))

(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(package-initialize)

;; (require 'server)
;; (unless (server-running-p) (server-start))

(set-language-environment 'Japanese)
(prefer-coding-system 'utf-8)
(setq scroll-step 1)

;; ;; ;; taken from sakito --started--
;; ;; ;(set-default-coding-systems 'euc-jp)
;; ;; (prefer-coding-system 'utf-8) ; uncomment out by JM, 09/06/20
;; ;; (set-keyboard-coding-system 'sjis-mac)
;; ;; ;(set-terminal-coding-system 'euc-jp)
;; ;; (set-terminal-coding-system 'utf-8) ; by JM, 09/06/20
;; ;; (setq file-name-coding-system 'utf-8)
;; ;; ;(set-buffer-process-coding-system 'utf-8)
;; ;; (set-clipboard-coding-system 'sjis-mac)
;; ;; (setq network-coding-system-alist
;; ;;       '(("nntp" . (junet-unix . junet-unix))
;; ;;        (110 . (no-conversion . no-conversion))
;; ;;        (25 . (no-conversion . no-conversion))
;; ;;        ))
;; ;; ;;taken from sakito --end

;; ;; (setq default-coding-system 'utf-8)
;; (global-setkey "\M-n" (lambda () (interactive) (scroll-up 1)))
;; (global-setkey "\M-p" (lambda () (interactive) (scroll-down 1)))
;; ;; ;(setq default-coding-system 'sjis)

(if (window-system)
    (progn
      ;; font
      (create-fontset-from-ascii-font "Menlo-14:weight=normal:slant=normal" nil "menlokakugo")
      (set-fontset-font "fontset-menlokakugo"
			'unicode
			(font-spec :family "Hiragino Kaku Gothic ProN" :size 12)
			nil
			'append)
      (add-to-list 'default-frame-alist '(font . "fontset-menlokakugo"))
      )) 

;; (setq load-path (cons (expand-file-name "~/.emacs.d") load-path))
;; (setq exec-path (append exec-path '("/opt/local")))

(add-to-list 'exec-path "/opt/local/bin")
(add-to-list 'exec-path "/Users/motohisa/bin")

;; (setenv "PATH" (concat "/opt/bin:/opt/local/bin:" (getenv "PATH")))
;; (setenv "LTDL_LIBRARY_PATH"
;; 		(concat "/opt/local/lib:" (getenv "LTDL_LIBRARY_PATH")))

;; 引数を load-path へ追加
;; normal-top-level-add-subdirs-to-load-path はディレクトリ中で
;; [A-Za-z] で開始する物だけ追加する。
;; 追加したくない物は . や _ を先頭に付与しておけばロードしない
;; dolist は Emacs 21 から標準関数なので積極的に利用して良い
(defun add-to-load-path (&rest paths)
  (let (path)
    (dolist (path paths paths)
      (let ((default-directory
              (expand-file-name (concat user-emacs-directory path))))
        (add-to-list 'load-path default-directory)
        (if (fboundp 'normal-top-level-add-subdirs-to-load-path)
            (normal-top-level-add-subdirs-to-load-path))))))

(add-to-load-path "site-lisp"
                  ;; 変更したり、自作の Emacs Lisp
                  "local-lisp"
                  ;; private 内には自分専用の物がはいっている
                  ;; 依存は private 内で完結するようにしている
                  "private"
;;                  ;; 初期設定ファイル
;;                  "site-start.d"
				  )
(setq c-tab-always-indent t)
(setq default-tab-width 4)
(setq indent-line-function 'indent-relative-maybe) ; 前と同じ行の幅にインデント

;; (setq mac-option-modifier 'meta) ; mac 用の command キーバインド

(global-set-key "\C-x\C-i" 'indent-region) ; 選択範囲をインデント
(global-set-key "\C-m" 'newline-and-indent) ; リターンで改行とインデント
;; (global-set-key "\C-j" 'newline)  ; 改行

(global-set-key "\C-cc" 'comment-region)    ; C-c c を範囲指定コメントに
(global-set-key "\C-cu" 'uncomment-region)  ; C-c u を範囲指定コメント解除に

(global-unset-key "\C-t") ;; 無効化

(show-paren-mode t) ; 対応する括弧を光らせる。
(transient-mark-mode t) ; 選択部分のハイライト

(setq require-final-newline t)          ; always terminate last line in file
(setq default-major-mode 'text-mode)    ; default mode is text mode

(setq completion-ignore-case t) ; file名の補完で大文字小文字を区別しない
(setq partial-completion-mode 1) ; 補完機能を使う

;; ;; スタートアップメッセージを非表示
(setq inhibit-startup-message t)
;										; ツールバーの非表示
;;(if (window-system) (progn (tool-bar-mode nil)))
(tool-bar-mode nil)

;; ;; コマンドサーチパスの設定
;; (setenv "PATH"
;; 	(concat "/usr/local/bin:/opt/local/bin:" (getenv "PATH")))

;; ;;
;; ;; PATH
;; ;;
;; ;; (setenv "PATH"
;; ;;         (concat (getenv "PATH") ":/Library/TeX/texbin"))

;;
;; YaTeX
;; 2015/10/15: taken from https://oku.edu.mie-u.ac.jp/~okumura/texwiki/?YaTeX
;;
(autoload 'yatex-mode "yatex" "Yet Another LaTeX mode" t)
(setq auto-mode-alist
      (append '(("\\.tex$" . yatex-mode)
                ("\\.ltx$" . yatex-mode)
                ("\\.cls$" . yatex-mode)
                ("\\.sty$" . yatex-mode)
                ("\\.clo$" . yatex-mode)
                ("\\.bbl$" . yatex-mode)) auto-mode-alist))
(setq YaTeX-inhibit-prefix-letter t)
(setq YaTeX-kanji-code nil)
(setq YaTeX-latex-message-code 'utf-8)
(setq YaTeX-use-LaTeX2e t)
(setq YaTeX-use-AMS-LaTeX t)
(setq YaTeX-dvi2-command-ext-alist
      '(("TeXworks\\|texworks\\|texstudio\\|mupdf\\|SumatraPDF\\|Preview\\|Skim\\|TeXShop\\|evince\\|okular\\|zathura\\|qpdfview\\|Firefox\\|firefox\\|chrome\\|chromium\\|Adobe\\|Acrobat\\|AcroRd32\\|acroread\\|pdfopen\\|xdg-open\\|open\\|start" . ".pdf")))
;;(setq tex-command "/Users/motohisa/bin/pdfplatex")	  
(setq tex-command "/opt/local/bin/ptex2pdf -u -l -ot '-synctex=1'")
;(setq tex-command "/opt/local/bin/platex-ng -synctex=1")
;(setq tex-command "/opt/local/bin/pdflatex -synctex=1")
;(setq tex-command "/opt/local/bin/lualatex -synctex=1")
;(setq tex-command "/opt/local/bin/luajitlatex -synctex=1")
;(setq tex-command "/opt/local/bin/xelatex -synctex=1")
;(setq tex-command "/opt/local/bin/latexmk -e '$latex=q/uplatex %O -synctex=1 %S/' -e '$bibtex=q/upbibtex %O %B/' -e '$biber=q/biber %O --bblencoding=utf8 -u -U --output_safechars %B/' -e '$makeindex=q/upmendex %O -o %D %S/' -e '$dvipdf=q/dvipdfmx %O -o %D %S/' -norc -gg -pdfdvi")
;(setq tex-command "/opt/local/bin/latexmk -e '$latex=q/uplatex %O -synctex=1 %S/' -e '$bibtex=q/upbibtex %O %B/' -e '$biber=q/biber %O --bblencoding=utf8 -u -U --output_safechars %B/' -e '$makeindex=q/upmendex %O -o %D %S/' -e '$dvips=q/dvips %O -z -f %S | convbkmk -u > %D/' -e '$ps2pdf=q/ps2pdf %O %S %D/' -norc -gg -pdfps")
;(setq tex-command "/opt/local/bin/latexmk -e '$pdflatex=q/platex-ng %O -synctex=1 %S/' -e '$bibtex=q/upbibtex %O %B/' -e '$biber=q/biber %O --bblencoding=utf8 -u -U --output_safechars %B/' -e '$makeindex=q/upmendex %O -o %D %S/' -norc -gg -pdf")
;(setq tex-command "/opt/local/bin/latexmk -e '$pdflatex=q/pdflatex %O -synctex=1 %S/' -e '$bibtex=q/bibtex %O %B/' -e '$biber=q/biber %O --bblencoding=utf8 -u -U --output_safechars %B/' -e '$makeindex=q/makeindex %O -o %D %S/' -norc -gg -pdf")
;(setq tex-command "/opt/local/bin/latexmk -e '$pdflatex=q/lualatex %O -synctex=1 %S/' -e '$bibtex=q/upbibtex %O %B/' -e '$biber=q/biber %O --bblencoding=utf8 -u -U --output_safechars %B/' -e '$makeindex=q/upmendex %O -o %D %S/' -norc -gg -pdf")
;(setq tex-command "/opt/local/bin/latexmk -e '$pdflatex=q/luajitlatex %O -synctex=1 %S/' -e '$bibtex=q/upbibtex %O %B/' -e '$biber=q/biber %O --bblencoding=utf8 -u -U --output_safechars %B/' -e '$makeindex=q/upmendex %O -o %D %S/' -norc -gg -pdf")
;(setq tex-command "/opt/local/bin/latexmk -e '$pdflatex=q/xelatex %O -synctex=1 %S/' -e '$bibtex=q/upbibtex %O %B/' -e '$biber=q/biber %O --bblencoding=utf8 -u -U --output_safechars %B/' -e '$makeindex=q/upmendex %O -o %D %S/' -norc -gg -pdf")
(setq bibtex-command "/opt/local/bin/latexmk -e '$latex=q/uplatex %O -synctex=1 %S/' -e '$bibtex=q/upbibtex %O %B/' -e '$biber=q/biber %O --bblencoding=utf8 -u -U --output_safechars %B/' -e '$makeindex=q/upmendex %O -o %D %S/' -e '$dvipdf=q/dvipdfmx %O -o %D %S/' -norc -gg -pdfdvi")
(setq makeindex-command "/opt/local/bin/latexmk -e '$latex=q/uplatex %O -synctex=1 %S/' -e '$bibtex=q/upbibtex %O %B/' -e '$biber=q/biber %O --bblencoding=utf8 -u -U --output_safechars %B/' -e '$makeindex=q/upmendex %O -o %D %S/' -e '$dvipdf=q/dvipdfmx %O -o %D %S/' -norc -gg -pdfdvi")
(setq dvi2-command "/usr/bin/open -a Skim")
;(setq dvi2-command "/usr/bin/open -a Preview")
;(setq dvi2-command "/usr/bin/open -a TeXShop")
;(setq dvi2-command "/Applications/TeXworks.app/Contents/MacOS/TeXworks")
;(setq dvi2-command "/Applications/texstudio.app/Contents/MacOS/texstudio --pdf-viewer-only")
(setq tex-pdfview-command "/usr/bin/open -a Skim")
;(setq tex-pdfview-command "/usr/bin/open -a Preview")
;(setq tex-pdfview-command "/usr/bin/open -a TeXShop")
;(setq tex-pdfview-command "/Applications/TeXworks.app/Contents/MacOS/TeXworks")
;(setq tex-pdfview-command "/Applications/texstudio.app/Contents/MacOS/texstudio --pdf-viewer-only")
(setq dviprint-command-format "/usr/bin/open -a \"Adobe Acrobat Reader DC\" `echo %s | gsed -e \"s/\\.[^.]*$/\\.pdf/\"`")

(add-hook 'yatex-mode-hook
          '(lambda ()
             (auto-fill-mode -1)))

;;
;; RefTeX with YaTeX
;;
;(add-hook 'yatex-mode-hook 'turn-on-reftex)
(add-hook 'yatex-mode-hook
          '(lambda ()
             (reftex-mode 1)
             (define-key reftex-mode-map (concat YaTeX-prefix ">") 'YaTeX-comment-region)
             (define-key reftex-mode-map (concat YaTeX-prefix "<") 'YaTeX-uncomment-region)))

;;
;; yatex end
;;


;; ;; taken from http://blumec8.aees.kyushu-u.ac.jp/~satoru/emacs.html		   
;; ;;encoding
;; ;(set-default-coding-systems 'euc-jp-unix)
;; ;(set-default-coding-systems 'sjis-unix)
;; ;(set-buffer-file-coding-system 'sjis-mac)
;; ;(set-terminal-coding-system 'utf-8)
;; ;(set-keyboard-coding-system
;; ; (if (eq window-system 'mac) 'sjis-unix 'utf-8))
;; ;	;(set-clipboard-coding-system 'utf-8)
;; ;(set-clipboard-coding-system 'sjis-mac)
;; ;	;(set-file-name-coding-system 'utf-8)
;; ;(require 'utf-8m)
;; ;(set-file-name-coding-system 'utf-8m)
;; ;(if (eq window-system 'mac)
;; ;	(progn
;; ;	  (setq YaTeX-kanji-code '1)
;; 	;;   1=Shift JIS
;; 	;;   2=JIS
;; 	;;   3=EUC
;; ;	  (setq YaTeX-latex-message-code 'sjis-mac)
;; ;	  ))
;; ;(add-hook 'f90-mode-hook
;; ;		  (function
;; ;		   (lambda ()
;; ;			 (set-buffer-file-coding-system 'euc-jp-unix)
;; ;			 )))

;;Color
(if window-system (progn
					(setq initial-frame-alist '((width . 100) (height . 40)))
					;;  (set-background-color "RoyalBlue4")
					;;  (set-foreground-color "LightGray")
					;;  (set-cursor-color "Gray")
					))

;; ;;mac-option-key set to meta-key 
;; ;(setq mac-option-modifier 'meta)
;; ;(setq YaTeX-kanji-code 1)
;; ;(setq YaTeX-latex-message-code 'sjis)
;; ;(set-default-coding-systems 'utf-8-unix)
;; ;(set-default-coding-systems 'sjis-unix)
;; ;(set-terminal-coding-system 'utf-8-unix)
;; ;(set-keyboard-coding-system 'sjis-mac)
;; ;(set-clipboard-coding-system 'sjis-mac)
;; ;(setq-default buffer-file-coding-system 'utf-8)
;; ;(prefer-coding-system 'utf-8)
;; ;(prefer-coding-system 'sjis)

;; ;; ;; spice-mode (07/10/02)
;; ;; ;;
;; ;; (autoload 'spice-mode "spice-mode" "Spice/Layla Editing Mode" t)
;; ;; (setq auto-mode-alist (append (list (cons "\\.sp$" 'spice-mode)
;; ;;                                      (cons "\\.cir$" 'spice-mode)
;; ;;                                      (cons "\\.ckt$" 'spice-mode)
;; ;;                                      (cons "\\.mod$" 'spice-mode)
;; ;;                                      (cons "\\.cdl$" 'spice-mode)
;; ;;                                      (cons "\\.chi$" 'spice-mode) ;eldo outpt
;; ;;                                      (cons "\\.inp$" 'spice-mode))
;; ;;                                auto-mode-alist))


;; ;; ; 08/07/31 w3m
;; ;; ;; 4.1. 基本
;; ;; ;;     次の設定を ￣/.emacs に追加してください．
;; ;; (require 'w3m-load)
;; ;; (autoload 'w3m "w3m" "Interface for w3m on Emacs." t)

;; ;;     付属プログラムを使用するには，追加の設定が必要な場合があります．詳
;; ;;     細については，個々の付属プログラムのソースファイルの先頭に記載され
;; ;;     ているコメントを参照してください．良く分からない場合は，とりあえず，
;; ;;     以下の設定を ￣/.emacs に追加しておいてください．

;; (autoload 'w3m-find-file "w3m" "w3m interface function for local file." t)
;; (autoload 'w3m-search "w3m-search" "Search QUERY using SEARCH-ENGINE." t)
;; (autoload 'w3m-weather "w3m-weather" "Display weather report." t)
;; (autoload 'w3m-antenna "w3m-antenna" "Report chenge of WEB sites." t)
;; (autoload 'w3m-namazu "w3m-namazu" "Search files with Namazu." t)

;; (setq w3m-icon-directory
;;       (cond
;;        ((featurep 'mac-carbon) "/Applications/Emacs.app/Contents/Resource/etc/w3m")
;;        ((featurep 'dos-w32) "D:/cygwin//usr/local/emacs/etc/w3m")))

;; (setq w3m-namazu-tmp-file-name
;;       (cond
;;        ((featurep 'mac-carbon) "~/.nmz.html")
;;        ((featurep 'dos-w32) "d:/cygwin/home/hoge/.nmz.html")))

;; (setq w3m-namazu-index-file "~/.w3m-namazu.index")

;; (setq w3m-bookmark-file
;;       (cond
;;        ((featurep 'mac-carbon) "~/.w3m/bookmark.html")
;;        ((featurep 'dos-w32) "d:/cygwin/home/hoge/public_html/bookmark.html")))

;; (if (featurep 'dos-w32)
;;   (setq w3m-imagick-convert-program "d:/cygwin/usr/local/bin/convert.exe"))

;; ;;; ■■ browse-url
;; ;;;   以下のように設定しておくと、URI に類似した文字列がある場所で C-x m と
;; ;;;   入力すれば、w3m で表示されるようになる。
;; (setq browse-url-browser-function 'w3m-browse-url)
;; (autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
;; (global-set-key "\C-xm" 'browse-url-at-point)

;; ;;; ■■ dired
;; ;;;   以下のように設定しておくと、dired-mode のバッファでファイルを選択して
;; ;;;   いる状態で C-x m と入力すれば、該当ファイルが w3m で表示されるように
;; ;;;   なる。

;; (add-hook 'dired-mode-hook
;;           (lambda ()
;;             (define-key dired-mode-map "\C-xm" 'dired-w3m-find-file)))

;; (defun dired-w3m-find-file ()
;;   (interactive)
;;   (require 'w3m)
;;   (let ((file (dired-get-filename)))
;;     (if (y-or-n-p (format "Open 'w3m' %s " (file-name-nondirectory file)))
;;         (w3m-find-file file))))

;; ;;;; 10/06/09 japanese font was not shown, so below are commented out.
;; ; フォントの設定 ; 09/04/18 taken from emacs.el.txt but I do not know its source
;; ;(create-fontset-from-fontset-spec
;; ; (concat
;; ;  "-*-fixed-medium-r-normal-*-16-*-*-*-*-*-fontset-monaco16,"
;; ;  "japanese-jisx0208:-apple-osaka-medium-r-normal--16-160-75-75-m-160-jisx0208.1983-sjis,"
;; ;  "katakana-jisx0201:apple-helvetica-medium-r-normal--14-140-75-75-m-140-mac-roman,"
;; ;  "ascii:-apple-monaco-medium-r-normal-*-14-*-*-*-*-*-mac-roman"))
;; ;(set-default-font "fontset-monaco16")
;; ;;;(when (/= window-system 'x)
;; ;(setq default-frame-alist (append '((font . "fontset-monaco16"))))
;; ;;;)
;; ;;;解像度により上記が大きい場合は以下
;; ;(create-fontset-from-fontset-spec
;; ; (concat
;; ;  "-*-fixed-medium-r-normal-*-12-*-*-*-*-*-fontset-monaco12,"
;; ;  "japanese-jisx0208:-apple-osaka-medium-r-normal--14-140-*-m-140-jisx0208.1983-sjis,"
;; ;  "ascii:-apple-monaco-medium-r-normal-*-12-*-*-*-*-*-mac-roman"))
;; ;(set-default-font "fontset-monaco12")
;; ;(setq default-frame-alist (append '((font . "fontset-monaco12"))))


;; ;;以下は参考です、エラーになる物もあります
;; ;"japanese-jisx0201:,"  
;; ;(require 'bitmap)
;; ;(set-face-font 'default "-*-fixed-medium-r-normal-*-18-*")
;; ;(set-face-font 'default "-*-courier-medium-r-normal-*-18-*")
;; ;(set-face-font 'default "-*-monaco-medium-r-normal-*-14-*")
;; ;(if (fboundp 'new-fontset)
;; ;    (progn
;; ;      (create-fontset-from-fontset-spec
;; ;       "-*-fixed-medium-r-normal-*-18-*-*-*-*-*-fontset-mac,
;; ;        mac-roman-lower:-*-Monaco-*-*-*-*-14-*-*-*-*-*-mac-roman,
;; ;        mac-roman-upper:-*-Monaco-*-*-*-*-14-*-*-*-*-*-mac-roman,
;; ;        thai-tis620:-ETL-Fixed-*-*-*-*-16-*-*-*-*-*-tis620.2529-1,
;; ;        lao:-Misc-Fixed-*-*-*-*-16-*-*-*-*-*-MuleLao-1,
;; ;        vietnamese-viscii-lower:-ETL-Fixed-*-*-*-*-16-*-*-*-*-*-viscii1.1-1,
;; ;        vietnamese-viscii-upper:-ETL-Fixed-*-*-*-*-16-*-*-*-*-*-viscii1.1-1,
;; ;        chinese-big5-1:-*-Nice Taipei Mono-*-*-*-*-12-*-*-*-*-*-big5,
;; ;        chinese-big5-2:-*-Nice Taipei Mono-*-*-*-*-12-*-*-*-*-*-big5,
;; ;        chinese-gb2312:-*-Beijing-*-*-*-*-16-*-*-*-*-*-gb2312,
;; ;        japanese-jisx0208:-apple-osaka-medium-r-normal--18-180-75-75-m-180-jisx0208.1983-sjis,
;; ;        katakana-jisx0201:-*-*-*-*-*-*-16-*-*-*-*-*-JISX0201.1976-0,
;; ;        korean-ksc5601:-*-Seoul-*-*-*-*-16-*-*-*-*-*-ksc5601"
;; ;       t)))
;; ;(load "~/src/intlfonts-1.2/bdf_intn")
;; ;(load "~/src/intlfonts-1.2/bdf_intn24")
;; (add-to-list 'load-path "~/.emacs.d/site-lisp")


;; ; aspell
;; (add-to-list 'exec-path "/opt/local/bin/aspell")
;; (setq-default ispell-program-name "aspell")
;; (custom-set-variables
;;   ;; custom-set-variables was added by Custom.
;;   ;; If you edit it by hand, you could mess it up, so be careful.
;;   ;; Your init file should contain only one such instance.
;;   ;; If there is more than one, they won't work right.
;;  '(spice-simulator-alist (quote (("Spice3" "spice3 -b" "" ("\\s-*Error[	 ]+on[ 	]+line[	 ]+\\([0-9]+\\) +:.+" 0 1 nil (buffer-file-name)) ("Circuit: \\(.*\\)$" 1)) ("Hspice" "hspice" "" ("\\s-*\\(..?error..?[: ]\\).+" 0 spice-linenum 1 (buffer-file-name)) ("[* ]* [iI]nput [fF]ile: +\\([^ 	]+\\).*$" 1)) ("Eldo" "eldo -i" "" ("\\s-*\\(E[rR][rR][oO][rR] +[0-9]+:\\).*" 0 spice-linenum 1 (buffer-file-name)) ("Running \\(eldo\\).*$" 1)) ("Spectre" "spectre" "" ("\\s-*\"\\([^ 	
;; ]+\\)\" +\\([0-9]+\\):.*" 1 2) ("" 0)) ("ngspice" "ngspice" "" ("\\s-*\"\\([^ 	
;; ]+\\)\" +\\([0-9]+\\):.*" 1 2) ("" 0))))))
;; (custom-set-faces
;;   ;; custom-set-faces was added by Custom.
;;   ;; If you edit it by hand, you could mess it up, so be careful.
;;   ;; Your init file should contain only one such instance.
;;   ;; If there is more than one, they won't work right.
;;  )

;; ;; window
;; ;; (windmove-default-keybindings)
;; ;; なる設定を発見！！
;; ;; これを利用するとShiftと矢印キーで移動できるらしい。
;; ;; でも、PuttyとScreenが悪いのかうまく動かなかったので独自キーマッピング！！
;; ; windmove
;; ;; (windmove-default-keybindings)
;; ;; (global-set-key (quote [kp-8]) (quote windmove-up))
;; ;; (global-set-key (quote [kp-2]) (quote windmove-down))
;; ;; (global-set-key (quote [kp-6]) (quote windmove-right))
;; ;; (global-set-key (quote [kp-4]) (quote windmove-left))
;;(add-to-list 'load-path "~/.emacs.d/site-lisp")
(require 'switch-window)

;; flymake
;; flymake (for C)
(require 'flymake)
;; (setq flymake-log-level 3)
(defun flymake-c-init ()
  (let* ((temp-file   (flymake-init-create-temp-buffer-copy
         'flymake-create-temp-inplace))
         (local-file  (file-relative-name
                       temp-file
                       (file-name-directory buffer-file-name))))
    (list "gcc" (list "-Wall" "-Wextra" "-fsyntax-only" "-I/opt/local/include" "-I/usr/local/include" "-I/opt/local/include/guile/2.0" "-I/Users/motohisa/local/include" local-file))))
(defun flymake-h-init ()
  (let* ((temp-file   (flymake-init-create-temp-buffer-copy
                       'flymake-create-temp-inplace))
         (local-file  (file-relative-name
                       temp-file
                       (file-name-directory buffer-file-name))))
    (list "gcc" (list "-Wall" "-Wextra" "-I/opt/local/include" "-I/usr/local/include" "-I/opt/local/include/guile-2.0" "-I/Users/motohisa/local/include" local-file))))
 
(push '("\\.h$" flymake-h-init) flymake-allowed-file-name-masks)
(push '("\\.c$" flymake-c-init) flymake-allowed-file-name-masks)
 
(add-hook 'c-mode-hook
   '(lambda ()
      (flymake-mode t)))


;; 2015/09/08 skk
(add-to-list 'load-path "~/.emacs.d/elisp/skk")
(require 'skk-autoloads)
(global-set-key "\C-x\C-j" 'skk-mode)
(global-set-key "\C-x\C-t" 'skk-tutorial)

;; gdb->ggdb
(setq gud-gdb-command-name "/opt/local/bin/ggdb -i=mi")
(if (window-system)
	(progn
;;; 有用なバッファを開くモード
	  (setq gdb-many-windows t)
;;; 変数の上にマウスカーソルを置くと値を表示
	  (add-hook 'gdb-mode-hook '(lambda () (gud-tooltip-mode t)))
;;; I/O バッファを表示
	  (setq gdb-use-separate-io-buffer t)
;;; t にすると mini buffer に値が表示される
	  (setq gud-tooltip-echo-area nil)
	  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; various mode
;;
;; ctl-mode ;;
;; modified based on https://lists.gnu.org/archive/html/bug-gnu-emacs/2014-10/msg00918.html
;;
(if (assoc "\\.ctl" auto-mode-alist)
	    nil
    (nconc auto-mode-alist '(("\\.ctl" . scheme-mode))))

;; igor mode 12/04/27
  (add-to-list 'load-path "~/.emacs.d/site-lisp/igor-mode")
  (require 'igor-mode)
  
;; 
;;  08/02/05 octave mode
;; 
(autoload 'octave-mode "octave-mode" nil t)
(append '(("\\.m$" . octave-mode) auto-mode-alist))
;; (setq auto-mode-alist
;;       (cons '("\\.m$" . octave-mode) auto-mode-alist))

(add-hook 'octave-mode-hook
          (lambda ()
            (abbrev-mode 1)
            (auto-fill-mode 1)
            (if (eq window-system 'x)
                (font-lock-mode 1))))
;;
;; verilog mode
;;

(autoload 'verilog-mode "verilog-mode" "Verilog mode" t )
(append '(("\\.v\\'" . verilog-mode) auto-mode-alist))
(append '(("\\.dv\\'" . verilog-mode) auto-mode-alist))

;; ; 08/02/03
;; ; verilog mode
;; ; taken from http://ryusai.hp.infoseek.co.jp/veri-mode.htm
;; ; verilog mode is downloaded from http://www.verilog.com

;; (defun prepend-path ( my-path )
;; (setq load-path (cons (expand-file-name my-path) load-path)))

;; (defun append-path ( my-path )
;; (setq load-path (append load-path (list (expand-file-name my-path)))))

;; ;;Lood first in the directory ~/elisp for elisp files
;; (prepend-path "~/elisp")

;; ;;Load verilog-mode only when needed
;; (autoload 'verilog-mode "verilog-mode" "Verilog mode" t )

;; ;; Any files that end in .v should be in verilog mode
;; (setq auto-mode-alist (cons '("\\.v\\'" . verilog-mode) auto-mode-alist))

;; ;; Any files in verilog mode shuold have their keywords colorized
;; (add-hook 'verilog-mode-hook '(lambda () (font-lock-mode 1)))

;;
;; VHDL mode
;;
(autoload 'vhdl-mode "vhdl-mode" "VHDL Mode" t)
(setq auto-mode-alist (cons '("\\.vhdl?\\'" . vhdl-mode) auto-mode-alist))

;; AppleScript Mode
;;
(autoload 'applescript-mode "applescript-mode" "major mode for editing AppleScript source." t)
(setq auto-mode-alist
     (cons '("\\.applescript$" . applescript-mode) auto-mode-alist)
     )

;;freefem++-mode
(autoload 'freefem++-mode "freefem++-mode" nil t)
(setq auto-mode-alist
      (cons '("\\.edp$" . freefem++-mode) auto-mode-alist))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(inhibit-startup-screen t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; dedicated window
(defun toggle-window-dedicated ()
  "Toggle whether the current active window is dedicated or not"
  (interactive)
  (message
   (if (let (window (get-buffer-window (current-buffer)))
		 (set-window-dedicated-p window
								 (not (window-dedicated-p window))))
	   "Window '%s' is dedicated"
	 "Window '%s' is normal")
   (current-buffer)))
(global-set-key "\C-x\C-x" 'toggle-window-dedicated)
