(setq user-full-name "Junichi Motohisa")
(setq user-mail-address "motohisa@ist.hokudai.ac.jp")

(set-language-environment 'Japanese)
(prefer-coding-system 'utf-8)

;;
;; font
;;  originally from http://sakito.jp/emacs/emacs23.html
;;
(when (>= emacs-major-version 23)
 (set-face-attribute 'default nil
                     :family "apple-monaco"
                     :height 120)
;(set-fontset-font "fontset-default"
;                  'japanese-jisx0208
;                  '("ヒラギノ丸ゴ pro w4*" . "jisx0208.*"))

;(set-fontset-font "fontset-default"
;                  'katakana-jisx0201
;                  '("ヒラギノ丸ゴ pro w4*" . "jisx0201.*"))
 (set-fontset-font
  (frame-parameter nil 'font)
  'japanese-jisx0208
  '("Hiragino Maru Gothic Pro" . "iso10646-1"))
 (set-fontset-font
  (frame-parameter nil 'font)
  'japanese-jisx0212
  '("Hiragino Maru Gothic Pro" . "iso10646-1"))
 (set-fontset-font
  (frame-parameter nil 'font)
  'mule-unicode-0100-24ff
  '("monaco" . "iso10646-1"))
; (setq face-font-rescale-alist
;      '(("^-apple-hiragino.*" . 1.2)
;        (".*osaka-bold.*" . 1.2)
;        (".*osaka-medium.*" . 1.2)
;        (".*courier-bold-.*-mac-roman" . 1.0)
;        (".*monaco cy-bold-.*-mac-cyrillic" . 0.9)
;        (".*monaco-bold-.*-mac-roman" . 0.9)
;        ("-cdac$" . 1.3))))
)
;(create-fontset-from-ascii-font "Menlo-14:weight=normal:slant=normal" nil "menlokakugo")
;(set-fontset-font "fontset-menlokakugo"
;                  'unicode
;                  (font-spec :family "Hiragino Kaku Gothic ProN" :size 16)
;                  nil
;                  'append)
;(add-to-list 'default-frame-alist '(font . "fontset-menlokakugo"))

;;
;; font end
;;

;; 13/01/04
;; YaTeX
;; taken from http://oku.edu.mie-u.ac.jp/~okumura/texwiki/?YaTeX
;;
(add-to-list 'load-path "~/.emacs.d/site-lisp/yatex")
(autoload 'yatex-mode "yatex" "Yet Another LaTeX mode" t)
(setq auto-mode-alist
      (append '(("\\.tex$" . yatex-mode)
                ("\\.ltx$" . yatex-mode)
                ("\\.cls$" . yatex-mode)
                ("\\.sty$" . yatex-mode)
                ("\\.clo$" . yatex-mode)
                ("\\.bbl$" . yatex-mode)) auto-mode-alist))
(setq YaTeX-inhibit-prefix-letter t)
(setq YaTeX-kanji-code nil)
(setq YaTeX-use-LaTeX2e t)
(setq YaTeX-use-AMS-LaTeX t)
(setq YaTeX-dvipdf-command "/usr/texbin/dvipdfmx")
(setq YaTeX-dvi2-command-ext-alist
      '(("[agx]dvi\\|PictPrinter" . ".dvi")
        ("gv" . ".ps")
        ("Preview\\|TeXShop\\|TeXworks\\|Skim\\|mupdf\\|xpdf\\|Adobe" . ".pdf")))
;(setq tex-command "/usr/texbin/latexmk")
;(setq tex-command "/usr/texbin/latexmk -e '$latex=q/platex -synctex=1/' -e '$bibtex=q/pbibtex/' -e '$makeindex=q/mendex/' -e '$dvipdf=q/dvipdfmx %O -o %D %S/' -norc -gg -pdfdvi")
;(setq tex-command "/usr/texbin/latexmk -e '$latex=q/platex -synctex=1/' -e '$bibtex=q/pbibtex/' -e '$makeindex=q/mendex/' -e '$dvips=q/dvips %O -z -f %S | convbkmk -g > %D/' -e '$ps2pdf=q/ps2pdf %O %S %D/' -norc -gg -pdfps")
;(setq tex-command "/usr/texbin/latexmk -e '$latex=q/uplatex -synctex=1/' -e '$bibtex=q/upbibtex/' -e '$makeindex=q/mendex/' -e '$dvipdf=q/dvipdfmx %O -o %D %S/' -norc -gg -pdfdvi")
;(setq tex-command "/usr/texbin/latexmk -e '$latex=q/uplatex -synctex=1/' -e '$bibtex=q/upbibtex/' -e '$makeindex=q/mendex/' -e '$dvips=q/dvips %O -z -f %S | convbkmk -u > %D/' -e '$ps2pdf=q/ps2pdf %O %S %D/' -norc -gg -pdfps")
;(setq tex-command "/usr/texbin/latexmk -e '$pdflatex=q/pdflatex -synctex=1/' -e '$bibtex=q/bibtex/' -e '$makeindex=q/makeindex/' -norc -gg -pdf")
;(setq tex-command "/usr/texbin/latexmk -e '$pdflatex=q/lualatex -synctex=1/' -e '$bibtex=q/bibtexu/' -e '$makeindex=q/texindy/' -norc -gg -pdf")
;(setq tex-command "/usr/texbin/latexmk -e '$pdflatex=q/xelatex -synctex=1/' -e '$bibtex=q/bibtexu/' -e '$makeindex=q/texindy/' -norc -gg -xelatex")
;(setq tex-command "/usr/texbin/platex -synctex=1")
(setq tex-command "/usr/local/bin/pdfplatex")
;(setq tex-command "/usr/local/bin/pdfplatex2")
;(setq tex-command "/usr/texbin/uplatex -synctex=1")
;(setq tex-command "/usr/local/bin/pdfuplatex")
;(setq tex-command "/usr/local/bin/pdfuplatex2")
;(setq tex-command "/usr/texbin/pdflatex -synctex=1")
;(setq tex-command "/usr/texbin/lualatex -synctex=1")
;(setq tex-command "/usr/texbin/xelatex -synctex=1")
(setq bibtex-command (cond ((string-match "uplatex" tex-command) "/usr/texbin/upbibtex")
                           ((string-match "platex" tex-command) "/usr/texbin/pbibtex")
                           ((string-match "lualatex\\|xelatex" tex-command) "/usr/texbin/bibtexu")
                           (t "/usr/texbin/bibtex")))
(setq makeindex-command (cond ((string-match "uplatex" tex-command) "/usr/texbin/mendex")
                              ((string-match "platex" tex-command) "/usr/texbin/mendex")
                              ((string-match "lualatex\\|xelatex" tex-command) "/usr/texbin/texindy")
                              (t "/usr/texbin/makeindex")))
(setq dvi2-command (cond ((string-match "pdf\\|lua\\|xe" tex-command) "/usr/bin/open -a Preview")
                         (t "/usr/bin/open -a PictPrinter")))
(setq dviprint-command-format (cond ((string-match "pdf\\|lua\\|xe" tex-command) "/usr/bin/open -a \"Adobe Reader\" %s")
                                    (t "/usr/bin/open -a \"Adobe Reader\" `echo %s | sed -e \"s/\\.[^.]*$/\\.pdf/\"`")))

(defun skim-forward-search ()
  (interactive)
  (let* ((ctf (buffer-name))
         (mtf)
         (pf)
         (ln (format "%d" (line-number-at-pos)))
         (cmd "/Applications/Skim.app/Contents/SharedSupport/displayline")
         (args))
    (if (YaTeX-main-file-p)
        (setq mtf (buffer-name))
      (progn
        (if (equal YaTeX-parent-file nil)
            (save-excursion
              (YaTeX-visit-main t)))
        (setq mtf YaTeX-parent-file)))
    (setq pf (concat (car (split-string mtf "\\.")) ".pdf"))
    (setq args (concat ln " " pf " " ctf))
    (message (concat cmd " " args))
    (process-kill-without-query
     (start-process-shell-command "displayline" nil cmd args))))

(add-hook 'yatex-mode-hook
          '(lambda ()
             (define-key YaTeX-mode-map (kbd "C-c s") 'skim-forward-search)))

(add-hook 'yatex-mode-hook
          '(lambda ()
             (auto-fill-mode -1)))

;;
;; RefTeX with YaTeX
;;
;(add-hook 'yatex-mode-hook 'turn-on-reftex)
(add-hook 'yatex-mode-hook
          '(lambda ()
             (reftex-mode 1)
             (define-key reftex-mode-map (concat YaTeX-prefix ">") 'YaTeX-comment-region)
             (define-key reftex-mode-map (concat YaTeX-prefix "<") 'YaTeX-uncomment-region)))
;; 13/01/14
;; YaTeX end
;;

;;
;; was a reminder of rihobook-emacs.d-init.el
;;
(setq  tex-command "/usr/local/bin/dotexshop"
           dvi2-command "open -a /Applications/TeXShop.app")

;; 自動改行を無効
(add-hook 'yatex-mode-hook'(lambda ()(setq auto-fill-function nil)))
(add-hook 'skk-mode-hook
         (lambda ()
           (if (eq major-mode 'yatex-mode)
               (progn
                 (define-key skk-j-mode-map “¥¥“ 'self-insert-command)
                 (define-key skk-j-mode-map “$“ 'YaTeX-insert-dollar)
                 ))
           ))
;;
;; End: a reminder of rihobook-emacs.el
;;

;;Color
(if window-system (progn
					(setq initial-frame-alist '((width . 100) (height . 40)))
	;;  (set-background-color "RoyalBlue4")
	;;  (set-foreground-color "LightGray")
	;;  (set-cursor-color "Gray")
					))

(setq load-path (cons (expand-file-name "~/.emacs.d") load-path))
(server-start)

(setq c-tab-always-indent t)
(setq default-tab-width 4)
(setq indent-line-function 'indent-relative-maybe) ; 前と同じ行の幅にインデント

(setq mac-allow-anti-aliasing nil)  ; mac 固有の設定
(setq mac-option-modifier 'meta) ; mac 用の command キーバインド
;;(mac-key-mode 1) ; MacKeyModeを使う

(global-set-key "\C-x\C-i" 'indent-region) ; 選択範囲をインデント
(global-set-key "\C-m" 'newline-and-indent) ; リターンで改行とインデント
(global-set-key "\C-j" 'newline)  ; 改行

(global-set-key "\C-cc" 'comment-region)    ; C-c c を範囲指定コメントに
(global-set-key "\C-cu" 'uncomment-region)  ; C-c u を範囲指定コメント解除に

(show-paren-mode t) ; 対応する括弧を光らせる。
(transient-mark-mode t) ; 選択部分のハイライト

(setq require-final-newline t)          ; always terminate last line in file
(setq default-major-mode 'text-mode)    ; default mode is text mode

(setq completion-ignore-case t) ; file名の補完で大文字小文字を区別しない
(setq partial-completion-mode 1) ; 補完機能を使う

;; spice-mode (07/10/02)
;;
(autoload 'spice-mode "spice-mode" "Spice/Layla Editing Mode" t)
(setq auto-mode-alist (append (list (cons "\\.sp$" 'spice-mode)
                                     (cons "\\.cir$" 'spice-mode)
                                     (cons "\\.ckt$" 'spice-mode)
                                     (cons "\\.mod$" 'spice-mode)
                                     (cons "\\.cdl$" 'spice-mode)
                                     (cons "\\.chi$" 'spice-mode) ;eldo outpt
                                     (cons "\\.inp$" 'spice-mode))
                               auto-mode-alist))

;; スタートアップメッセージを非表示
(setq inhibit-startup-message t)
(if window-system (progn
; ツールバーの非表示
(tool-bar-mode nil)))

(if (assoc "\\.ctl" auto-mode-alist)
	nil
  (nconc auto-mode-alist '(("\\.ctl" . scheme-mode))))
  
; 08/02/03
; verilog mode
; taken from http://ryusai.hp.infoseek.co.jp/veri-mode.htm
; verilog mode is downloaded from http://www.verilog.com

(defun prepend-path ( my-path )
(setq load-path (cons (expand-file-name my-path) load-path)))

(defun append-path ( my-path )
(setq load-path (append load-path (list (expand-file-name my-path)))))

;;Lood first in the directory ~/elisp for elisp files
(prepend-path "~/elisp")

;;Load verilog-mode only when needed
(autoload 'verilog-mode "verilog-mode" "Verilog mode" t )

;; Any files that end in .v should be in verilog mode
(setq auto-mode-alist (cons '("\\.v\\'" . verilog-mode) auto-mode-alist))

;; Any files in verilog mode shuold have their keywords colorized
(add-hook 'verilog-mode-hook '(lambda () (font-lock-mode 1)))

;;
;; 08/02/05 octave mode
;;
(autoload 'octave-mode "octave-mod" nil t)
(setq auto-mode-alist
      (cons '("\\.m$" . octave-mode) auto-mode-alist))

(add-hook 'octave-mode-hook
          (lambda ()
            (abbrev-mode 1)
            (auto-fill-mode 1)
            (if (eq window-system 'x)
                (font-lock-mode 1))))

;; 
;; 08/07/31 w3m, modified on 13/01/04
;; 必要ならload-pathに追加
(add-to-list 'load-path "~/.emacs.d/elisp/emacs-w3m/share/emacs/site-lisp/w3m")
;; w3mのコマンドのパスを指定
(setq w3m-command "/opt/local/bin/w3m")
(require 'w3m-load)

;; 4.1. 基本
;;     次の設定を ￣/.emacs に追加してください．
;;(require 'w3m-load)
(autoload 'w3m "w3m" "Interface for w3m on Emacs." t)

;;     付属プログラムを使用するには，追加の設定が必要な場合があります．詳
;;     細については，個々の付属プログラムのソースファイルの先頭に記載され
;;     ているコメントを参照してください．良く分からない場合は，とりあえず，
;;     以下の設定を ￣/.emacs に追加しておいてください．

(autoload 'w3m-find-file "w3m" "w3m interface function for local file." t)
(autoload 'w3m-search "w3m-search" "Search QUERY using SEARCH-ENGINE." t)
(autoload 'w3m-weather "w3m-weather" "Display weather report." t)
(autoload 'w3m-antenna "w3m-antenna" "Report chenge of WEB sites." t)
(autoload 'w3m-namazu "w3m-namazu" "Search files with Namazu." t)

(setq w3m-icon-directory
      (cond
       ((featurep 'mac-carbon) "/Applications/Emacs.app/Contents/Resource/etc/w3m")
       ((featurep 'dos-w32) "D:/cygwin//usr/local/emacs/etc/w3m")))

(setq w3m-namazu-tmp-file-name
      (cond
       ((featurep 'mac-carbon) "~/.nmz.html")
       ((featurep 'dos-w32) "d:/cygwin/home/hoge/.nmz.html")))

(setq w3m-namazu-index-file "~/.w3m-namazu.index")

(setq w3m-bookmark-file
      (cond
       ((featurep 'mac-carbon) "~/.w3m/bookmark.html")
       ((featurep 'dos-w32) "d:/cygwin/home/hoge/public_html/bookmark.html")))

(if (featurep 'dos-w32)
  (setq w3m-imagick-convert-program "d:/cygwin/usr/local/bin/convert.exe"))

;;; ■■ browse-url
;;;   以下のように設定しておくと、URI に類似した文字列がある場所で C-x m と
;;;   入力すれば、w3m で表示されるようになる。
(setq browse-url-browser-function 'w3m-browse-url)
(autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
(global-set-key "\C-xm" 'browse-url-at-point)

;;; ■■ dired
;;;   以下のように設定しておくと、dired-mode のバッファでファイルを選択して
;;;   いる状態で C-x m と入力すれば、該当ファイルが w3m で表示されるように
;;;   なる。
(add-hook 'dired-mode-hook
          (lambda ()
            (define-key dired-mode-map "\C-xm" 'dired-w3m-find-file)))

(defun dired-w3m-find-file ()
  (interactive)
  (require 'w3m)
  (let ((file (dired-get-filename)))
    (if (y-or-n-p (format "Open 'w3m' %s " (file-name-nondirectory file)))
        (w3m-find-file file))))
;; 13/01/04
;; w3m end
;1;

;;;
;;; verilog mode
;;;

(autoload 'verilog-mode "verilog-mode" "Verilog mode" t )
(setq auto-mode-alist (cons  '("\\.v\\'" . verilog-mode) auto-mode-alist))
(setq auto-mode-alist (cons  '("\\.dv\\'" . verilog-mode) auto-mode-alist))

;;;
;;; VHDL mode
;;;
(autoload 'vhdl-mode "vhdl-mode" "VHDL Mode" t)
(setq auto-mode-alist (cons '("\\.vhdl?\\'" . vhdl-mode) auto-mode-alist))

;;
;; AppleScript Mode
;;
(autoload 'applescript-mode "applescript-mode" "major mode for editing AppleScript source." t)
(setq auto-mode-alist
     (cons '("\\.applescript$" . applescript-mode) auto-mode-alist)
     )

;; フォントの設定 ; 09/04/18 taken from emacs.el.txt but I do not know its source
;(create-fontset-from-fontset-spec
; (concat
;  "-*-fixed-medium-r-normal-*-16-*-*-*-*-*-fontset-monaco16,"
;  "japanese-jisx0208:-apple-osaka-medium-r-normal--16-160-75-75-m-160-jisx0208.1983-sjis,"
;  "katakana-jisx0201:apple-helvetica-medium-r-normal--14-140-75-75-m-140-mac-roman,"
;  "ascii:-apple-monaco-medium-r-normal-*-14-*-*-*-*-*-mac-roman"))
;(set-default-font "fontset-monaco16")
;;(when (/= window-system 'x)
;(setq default-frame-alist (append '((font . "fontset-monaco16"))))
;;)
;;解像度により上記が大きい場合は以下
;(create-fontset-from-fontset-spec
; (concat
;  "-*-fixed-medium-r-normal-*-12-*-*-*-*-*-fontset-monaco12,"
;  "japanese-jisx0208:-apple-osaka-medium-r-normal--14-140-*-m-140-jisx0208.1983-sjis,"
;  "ascii:-apple-monaco-medium-r-normal-*-12-*-*-*-*-*-mac-roman"))
;(set-default-font "fontset-monaco12")
;(setq default-frame-alist (append '((font . "fontset-monaco12"))))


;;以下は参考です、エラーになる物もあります
;"japanese-jisx0201:,"  
;(require 'bitmap)
;(set-face-font 'default "-*-fixed-medium-r-normal-*-18-*")
;(set-face-font 'default "-*-courier-medium-r-normal-*-18-*")
;(set-face-font 'default "-*-monaco-medium-r-normal-*-14-*")
;(if (fboundp 'new-fontset)
;    (progn
;      (create-fontset-from-fontset-spec
;       "-*-fixed-medium-r-normal-*-18-*-*-*-*-*-fontset-mac,
;        mac-roman-lower:-*-Monaco-*-*-*-*-14-*-*-*-*-*-mac-roman,
;        mac-roman-upper:-*-Monaco-*-*-*-*-14-*-*-*-*-*-mac-roman,
;        thai-tis620:-ETL-Fixed-*-*-*-*-16-*-*-*-*-*-tis620.2529-1,
;        lao:-Misc-Fixed-*-*-*-*-16-*-*-*-*-*-MuleLao-1,
;        vietnamese-viscii-lower:-ETL-Fixed-*-*-*-*-16-*-*-*-*-*-viscii1.1-1,
;        vietnamese-viscii-upper:-ETL-Fixed-*-*-*-*-16-*-*-*-*-*-viscii1.1-1,
;        chinese-big5-1:-*-Nice Taipei Mono-*-*-*-*-12-*-*-*-*-*-big5,
;        chinese-big5-2:-*-Nice Taipei Mono-*-*-*-*-12-*-*-*-*-*-big5,
;        chinese-gb2312:-*-Beijing-*-*-*-*-16-*-*-*-*-*-gb2312,
;        japanese-jisx0208:-apple-osaka-medium-r-normal--18-180-75-75-m-180-jisx0208.1983-sjis,
;        katakana-jisx0201:-*-*-*-*-*-*-16-*-*-*-*-*-JISX0201.1976-0,
;        korean-ksc5601:-*-Seoul-*-*-*-*-16-*-*-*-*-*-ksc5601"
;       t)))
;(load "~/src/intlfonts-1.2/bdf_intn")
;(load "~/src/intlfonts-1.2/bdf_intn24")

;;
;; igor mode 12/04/27
;;
  (add-to-list 'load-path "~/.emacs.d/site-lisp/igor-mode")
  (require 'igor-mode)

;; reftex mode 12/07/03;; commented in on 13/01/04 ;; see above yatex mode
;(add-hook 'yatex-mode-hook 'turn-on-reftex) ; with YaTeX mode
